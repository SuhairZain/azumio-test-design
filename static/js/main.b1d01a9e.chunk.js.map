{"version":3,"sources":["global/colors.ts","global/strings.ts","Onboarding/FocusAreaSelectionButton/index.tsx","Onboarding/Pagination.tsx","utils/range.ts","Onboarding/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["onboardingHeader","onboardingReason","onboardingFocusAreaNames","a1c","blood_glucose","blood_pressure","exercise","food_tracking","medication","weight_management","back","next","done","STYLE_SELECTED","color","colors","background","STYLE_UNSELECTED","FocusAreaSelectionButton","this","props","focusArea","selected","className","style","border","onClick","fontSize","name","PureComponent","Pagination","start","end","currentIndex","numberOfPages","isOnLastPage","flexDirection","alignItems","justifyContent","strings","toLocaleUpperCase","flex","Array","fill","map","_","i","dotSize","backgroundColor","key","height","width","borderRadius","marginLeft","focusAreas","id","Onboarding","state","focusAreaSelection","padding","paddingTop","overflow","marginTop","flexWrap","setState","paddingBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1d01a9e.chunk.js","sourcesContent":["export default {\n    azumioBlue: '#44399C',\n    \n    textOnLightBackground: '#252647',\n    textOnDarkBackground: '#FFFFFF',\n    mutedText: '#808791',\n\n    mutedControls: '#D6D6D6',\n\n    white: '#FFFFFF',\n    transparent: 'transparent',\n};\n","import { FocusAreaId } from \"../Onboarding/types\";\n\nexport default {\n    onboardingHeader: 'What are your main areas of focus?',\n    onboardingReason: 'This will help us build a personalized experience for you',\n\n    onboardingFocusAreaNames: {\n        a1c: 'A1C',\n        blood_glucose: 'Blood Glucose',\n        blood_pressure: 'Blood Pressure',\n        exercise: 'Exercise',\n        food_tracking: 'Food Tracking',\n        medication: 'Medication',\n        weight_management: 'Weight Management',\n    } as { [key in FocusAreaId]: string },\n\n    back: 'back',\n    next: 'next',\n    done: 'done',\n};\n","import React, { PureComponent } from 'react';\n\nimport './FocusAreaSelectionButton.css';\n\nimport { FocusArea } from '../types';\n\nimport colors from '../../global/colors';\n\ntype Props = {\n    focusArea: FocusArea;\n    selected: boolean;\n    onClick: (focusArea: FocusArea) => void;\n};\n\nconst STYLE_SELECTED = {\n    color: colors.textOnDarkBackground,\n    background: colors.azumioBlue,\n};\n\nconst STYLE_UNSELECTED = {\n    color: colors.mutedText,\n    background: colors.white,\n};\n\nclass FocusAreaSelectionButton extends PureComponent<Props, never> {\n    render() {\n        const { focusArea, selected } = this.props;\n\n        return (\n            <button\n                className={`focus-area-selection-button ${selected ? 'button-selected' : ''}`}\n                style={{ ...(selected ? STYLE_SELECTED : STYLE_UNSELECTED), border: `1px solid ${selected ? colors.transparent : colors.mutedControls}` }}\n                onClick={() => this.props.onClick(focusArea)}>\n                <span style={{ fontSize: '1.5em' }}><b>{focusArea.name}</b></span>\n            </button>\n        );\n    }\n}\n\nexport default FocusAreaSelectionButton;\n","import React, { PureComponent } from 'react';\n\nimport { range } from '../utils/range';\n\nimport colors from '../global/colors';\nimport strings from '../global/strings';\n\ntype Props = {\n    currentIndex: number;\n    numberOfPages: number;\n};\n\nconst DOT_SIZE = 8;\nconst CURR_DOT_SIZE = 12;\n\nclass Pagination extends PureComponent<Props, never> {\n    render() {\n        const { currentIndex, numberOfPages } = this.props;\n\n        const isOnLastPage = currentIndex === numberOfPages - 1;\n\n        return (\n            <div style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>\n                <span style={{ color: colors.mutedText }}>{strings.back.toLocaleUpperCase()}</span>\n                <div style={{ flex: 1, flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>\n                    {range(0, numberOfPages).map(i => {\n                        const dotSize = i === currentIndex ? CURR_DOT_SIZE : DOT_SIZE;\n                        const backgroundColor = i === currentIndex ? colors.azumioBlue : colors.mutedControls;\n\n                        return (\n                            <div\n                                key={i}\n                                style={{ height: dotSize, width: dotSize, borderRadius: dotSize / 2, backgroundColor, marginLeft: i === 0 ? 0 : 12 }} />\n                        );\n                    })}\n                </div>\n                <span style={{ color: colors.azumioBlue }}><b>{(isOnLastPage ? strings.done : strings.next).toLocaleUpperCase()}</b></span>\n            </div>\n        );\n    }\n}\n\nexport default Pagination;\n","/** Returns an array of length (end - start), with numbers ranging from start(inclusive) to end(exclusive) */\nexport const range = (start: number, end: number) => {\n    return Array(end - start).fill(0).map((_, i) => i + start);\n};\n","import React, { PureComponent } from 'react';\n\nimport { FocusArea, FocusAreaId } from './types';\n\nimport strings from '../global/strings';\nimport FocusAreaSelectionButton from './FocusAreaSelectionButton';\nimport Pagination from './Pagination';\n\nconst focusAreas: FocusArea[] = [\n    { id: 'blood_glucose', name: strings.onboardingFocusAreaNames.blood_glucose },\n    { id: 'medication', name: strings.onboardingFocusAreaNames.medication },\n    { id: 'food_tracking', name: strings.onboardingFocusAreaNames.food_tracking },\n    { id: 'exercise', name: strings.onboardingFocusAreaNames.exercise },\n    { id: 'weight_management', name: strings.onboardingFocusAreaNames.weight_management },\n    { id: 'blood_pressure', name: strings.onboardingFocusAreaNames.blood_pressure },\n    { id: 'a1c', name: strings.onboardingFocusAreaNames.a1c },\n];\n\ntype State = {\n    focusAreaSelection: Partial<{ [key in FocusAreaId]: boolean }>;\n};\n\nclass Onboarding extends PureComponent<{}, State> {\n    state: State = {\n        focusAreaSelection: {},\n    };\n\n    render() {\n        const { focusAreaSelection } = this.state;\n\n        return (\n            <div style={{ flex: 1, padding: '0 24px' }}>\n                <div style={{ paddingTop: 32, overflow: 'scroll' }}>\n                    <h1>{strings.onboardingHeader}</h1>\n                    <h3 style={{ marginTop: 16 }}>{strings.onboardingReason}</h3>\n                    <div style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>\n                        {focusAreas.map(focusArea => {\n                            const selected = !!focusAreaSelection[focusArea.id];\n\n                            return (\n                                <FocusAreaSelectionButton\n                                    key={focusArea.id}\n                                    focusArea={focusArea}\n                                    selected={selected}\n                                    onClick={(focusArea) => {\n                                        this.setState({\n                                            focusAreaSelection: {\n                                                ...this.state.focusAreaSelection,\n                                                [focusArea.id]: !selected,\n                                            },\n                                        })\n                                    }} />\n                            );\n                        })}\n                    </div>\n                </div>\n                <div style={{ flex: 1, justifyContent: 'flex-end', paddingBottom: 24, marginTop: 48 }}>\n                    <Pagination currentIndex={4} numberOfPages={5} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Onboarding;\n","import React from 'react';\nimport './App.css';\n\nimport colors from './global/colors';\nimport Onboarding from './Onboarding';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ color: colors.textOnLightBackground }}>\n      <Onboarding />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}